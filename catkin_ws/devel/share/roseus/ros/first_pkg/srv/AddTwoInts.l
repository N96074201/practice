;; Auto-generated. Do not edit!


(when (boundp 'first_pkg::AddTwoInts)
  (if (not (find-package "FIRST_PKG"))
    (make-package "FIRST_PKG"))
  (shadow 'AddTwoInts (find-package "FIRST_PKG")))
(unless (find-package "FIRST_PKG::ADDTWOINTS")
  (make-package "FIRST_PKG::ADDTWOINTS"))
(unless (find-package "FIRST_PKG::ADDTWOINTSREQUEST")
  (make-package "FIRST_PKG::ADDTWOINTSREQUEST"))
(unless (find-package "FIRST_PKG::ADDTWOINTSRESPONSE")
  (make-package "FIRST_PKG::ADDTWOINTSRESPONSE"))

(in-package "ROS")





(defclass first_pkg::AddTwoIntsRequest
  :super ros::object
  :slots (_c _d ))

(defmethod first_pkg::AddTwoIntsRequest
  (:init
   (&key
    ((:c __c) 0)
    ((:d __d) 0)
    )
   (send-super :init)
   (setq _c (round __c))
   (setq _d (round __d))
   self)
  (:c
   (&optional __c)
   (if __c (setq _c __c)) _c)
  (:d
   (&optional __d)
   (if __d (setq _d __d)) _d)
  (:serialization-length
   ()
   (+
    ;; int64 _c
    8
    ;; int64 _d
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _c
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _c (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _c) (= (length (_c . bv)) 2)) ;; bignum
              (write-long (ash (elt (_c . bv) 0) 0) s)
              (write-long (ash (elt (_c . bv) 1) -1) s))
             ((and (class _c) (= (length (_c . bv)) 1)) ;; big1
              (write-long (elt (_c . bv) 0) s)
              (write-long (if (>= _c 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _c s)(write-long (if (>= _c 0) 0 #xffffffff) s)))
     ;; int64 _d
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _d (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _d) (= (length (_d . bv)) 2)) ;; bignum
              (write-long (ash (elt (_d . bv) 0) 0) s)
              (write-long (ash (elt (_d . bv) 1) -1) s))
             ((and (class _d) (= (length (_d . bv)) 1)) ;; big1
              (write-long (elt (_d . bv) 0) s)
              (write-long (if (>= _d 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _d s)(write-long (if (>= _d 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _c
#+(or :alpha :irix6 :x86_64)
      (setf _c (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _c (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;; int64 _d
#+(or :alpha :irix6 :x86_64)
      (setf _d (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _d (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(defclass first_pkg::AddTwoIntsResponse
  :super ros::object
  :slots (_sum ))

(defmethod first_pkg::AddTwoIntsResponse
  (:init
   (&key
    ((:sum __sum) 0)
    )
   (send-super :init)
   (setq _sum (round __sum))
   self)
  (:sum
   (&optional __sum)
   (if __sum (setq _sum __sum)) _sum)
  (:serialization-length
   ()
   (+
    ;; int64 _sum
    8
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int64 _sum
#+(or :alpha :irix6 :x86_64)
       (progn (sys::poke _sum (send s :buffer) (send s :count) :long) (incf (stream-count s) 8))
#-(or :alpha :irix6 :x86_64)
       (cond ((and (class _sum) (= (length (_sum . bv)) 2)) ;; bignum
              (write-long (ash (elt (_sum . bv) 0) 0) s)
              (write-long (ash (elt (_sum . bv) 1) -1) s))
             ((and (class _sum) (= (length (_sum . bv)) 1)) ;; big1
              (write-long (elt (_sum . bv) 0) s)
              (write-long (if (>= _sum 0) 0 #xffffffff) s))
             (t                                         ;; integer
              (write-long _sum s)(write-long (if (>= _sum 0) 0 #xffffffff) s)))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int64 _sum
#+(or :alpha :irix6 :x86_64)
      (setf _sum (prog1 (sys::peek buf ptr- :long) (incf ptr- 8)))
#-(or :alpha :irix6 :x86_64)
      (setf _sum (let ((b0 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4)))
                  (b1 (prog1 (sys::peek buf ptr- :integer) (incf ptr- 4))))
              (cond ((= b1 -1) b0)
                     ((and (= b1  0)
                           (<= lisp::most-negative-fixnum b0 lisp::most-positive-fixnum))
                      b0)
                    ((= b1  0) (make-instance bignum :size 1 :bv (integer-vector b0)))
                    (t (make-instance bignum :size 2 :bv (integer-vector b0 (ash b1 1)))))))
   ;;
   self)
  )

(defclass first_pkg::AddTwoInts
  :super ros::object
  :slots ())

(setf (get first_pkg::AddTwoInts :md5sum-) "c3cd2fd36e8ced884a65d3b37b87ebd2")
(setf (get first_pkg::AddTwoInts :datatype-) "first_pkg/AddTwoInts")
(setf (get first_pkg::AddTwoInts :request) first_pkg::AddTwoIntsRequest)
(setf (get first_pkg::AddTwoInts :response) first_pkg::AddTwoIntsResponse)

(defmethod first_pkg::AddTwoIntsRequest
  (:response () (instance first_pkg::AddTwoIntsResponse :init)))

(setf (get first_pkg::AddTwoIntsRequest :md5sum-) "c3cd2fd36e8ced884a65d3b37b87ebd2")
(setf (get first_pkg::AddTwoIntsRequest :datatype-) "first_pkg/AddTwoIntsRequest")
(setf (get first_pkg::AddTwoIntsRequest :definition-)
      "int64 c
int64 d
---
int64 sum

")

(setf (get first_pkg::AddTwoIntsResponse :md5sum-) "c3cd2fd36e8ced884a65d3b37b87ebd2")
(setf (get first_pkg::AddTwoIntsResponse :datatype-) "first_pkg/AddTwoIntsResponse")
(setf (get first_pkg::AddTwoIntsResponse :definition-)
      "int64 c
int64 d
---
int64 sum

")



(provide :first_pkg/AddTwoInts "c3cd2fd36e8ced884a65d3b37b87ebd2")


